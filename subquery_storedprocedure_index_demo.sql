
use Northwind

-- Q1: "Loyal Customers" Report
-- List customers who have placed at least 10 orders. For each customer, provide the total number of orders, total spending, and the country they have ordered from the most.
GO
IF NOT EXISTS (
	SELECT * FROM sys.indexes --Create necessary indexes for performance
	WHERE name = 'IX_Orders_CustomerID' AND object_id = OBJECT_ID('Orders')
)
BEGIN
	CREATE NONCLUSTERED INDEX IX_Orders_CustomerID
	ON Orders (CustomerID);
END
GO

WITH OrderCounts AS (
	SELECT 
		O.CustomerID,
		O.ShipCountry,
		COUNT(*) AS OrderCount
	FROM ORDERS O
	GROUP BY O.CustomerID, O.ShipCountry
),

CountryRank AS (
	SELECT
		CustomerID,
		ShipCountry,
		ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY OrderCount DESC) AS rn
	FROM OrderCounts
)

-- Main Query
SELECT 
	C.CompanyName,
	T1.TotalOrders,
	T2.TotalSpending,
	CR.ShipCountry AS MostOrderedCountry
FROM (
-- Total orders per customer
	SELECT 
		CustomerID,
		COUNT(OrderID) as TotalOrders
	FROM Orders
	GROUP BY CustomerID
	HAVING COUNT(OrderID) >= 10
) T1
JOIN (
-- Total spending per customer
	SELECT 
		O.CustomerID,
		SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSpending
	FROM Orders O
	JOIN [Order Details] AS OD ON O.OrderID = OD.OrderID
	GROUP BY O.CustomerID
) T2 ON T1.CustomerID = T2.CustomerID
JOIN CountryRank CR ON CR.CustomerID = T1.CustomerID AND CR.rn = 1
JOIN Customers C ON C.CustomerID = T1.CustomerID
ORDER BY T2.TotalSpending DESC



-- "Revenue-Generating Employees" Analysis
-- List employees whose total order revenue exceeds 5,000 TL.

GO
-- Create supporting indexes if they do not exist to optimize query performance
-- The index on Orders(EmployeeID) will speed up the lookup of employees for whom revenue is calculated
IF NOT EXISTS (
	SELECT * FROM sys.indexes 
	WHERE name = 'IX_Orders_EmployeeID' AND object_id = OBJECT_ID('Orders')
)
BEGIN
	CREATE NONCLUSTERED INDEX IX_Orders_EmployeeID
	ON Orders (EmployeeID); -- Helps with quick lookups on EmployeeID in Orders table
END
GO

-- The index on Order Details(OrderID) speeds up the JOIN between Orders and Order Details
IF NOT EXISTS (
	SELECT * FROM sys.indexes 
	WHERE name = 'IX_OrderDetails_OrderID' AND object_id = OBJECT_ID('[Order Details]')
)
BEGIN
	CREATE NONCLUSTERED INDEX IX_OrderDetails_OrderID
	ON [Order Details] (OrderID); -- Improves the performance of joins involving OrderID
END
GO

GO
CREATE OR ALTER FUNCTION dbo.GetRevenuebyEmployee(@EmployeeID INT)
RETURNS MONEY
AS
BEGIN
	DECLARE @Income MONEY
	-- Calculate total revenue generated by the given employee
	SELECT @Income = SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount))
	FROM Orders O
	JOIN [Order Details] OD ON O.OrderID = OD.OrderID
	WHERE O.EmployeeID = @EmployeeID

	-- Return 0 if there is no income
	RETURN ISNULL(@Income, 0);

END
GO

-- Main Query: Get employees whose revenue > 5000 TL
SELECT 
	E.EmployeeID,
	E.FirstName + ' ' + E.LastName AS FullName,
	FORMAT(dbo.GetRevenuebyEmployee(E.EmployeeID), 'C', 'tr-TR') AS TotalRevenue -- Format as Turkish currency
FROM Employees E
WHERE dbo.GetRevenuebyEmployee(E.EmployeeID) > 5000
ORDER BY TotalRevenue DESC


-- "Search Products by Name"
-- Write a stored procedure that lists products containing a given word as a parameter. (e.g., 'ch' → 'Chai', 'Chocolade')

IF NOT EXISTS (
	SELECT * FROM sys.indexes 
	WHERE name = 'IX_ProductName' AND object_id = OBJECT_ID('Products')
)
BEGIN
	CREATE NONCLUSTERED INDEX IX_ProductName ON Products(ProductName);
END

IF NOT EXISTS (
	SELECT * FROM sys.indexes 
	WHERE name = 'IX_UnitPrice' AND object_id = OBJECT_ID('Products')
)
BEGIN
	CREATE NONCLUSTERED INDEX IX_UnitPrice ON Products(UnitPrice);
END

GO
CREATE OR ALTER PROCEDURE dbo.SearchProductsbyName
	@Keyword NVARCHAR(50), -- The word to search for in product names
	@MinPrice MONEY = 0,
	@MaxPrice MONEY = NULL
AS
BEGIN
	SELECT 
		ProductID,
		ProductName,
		UnitPrice,
		UnitsInStock
	FROM Products
	WHERE ProductName COLLATE Latin1_General_CI_AI LIKE'%' + @Keyword + '%' -- Case-insensitive partial match
	AND UnitsInStock > 0 -- Only show products that are in stock
	AND UnitPrice >= @MinPrice
	AND (@MaxPrice IS NULL OR UnitPrice <= @MaxPrice)
	ORDER BY ProductName
END
GO

EXEC dbo.SearchProductsbyName @Keyword = 'ch'
EXEC dbo.SearchProductsByName @Keyword = 'ch', @MinPrice = 10, @MaxPrice = 25
EXEC dbo.SearchProductsByName @Keyword = 'ch', @MinPrice = 20

/*
  Procedure: dbo.SearchProductsbyName
  Purpose:   Allows keyword-based product search with optional price filtering.
  Features:
    - Case-insensitive and accent-insensitive search
    - Filters out out-of-stock products
    - Uses non-clustered indexes for better performance
    - Optional price range filtering via @MinPrice and @MaxPrice
*/